// this file provides a diagram of the state-machine implemented in deimos/source/designer/Designer.js
// To compile this file, install graphviz (http://graphviz.org/) and run the following command:
// dot -Tpng designerFrame.dot > designerFrame.png

// red transitions store a callback in the FSM
// green transitions consume this callback

digraph G {
	edge [ fontsize = 14 ];

	// done states
	node [shape = box , fontsize = 18, fontcolor=green ];

	off;
	reloading;
	initializing;
	initialized;
	ready;  // use published designerFrameReady attribute
	rendering ; // use renderCallback
	updating;
	broken;
	selecting ;
	closed;

	// designer buttons should be allowed only in some states

	// innocuous message
	ready -> ready [ label = "✋resize\n✋zoom\nresize⇩\ndfSelect\n⇧selected" ];

	ready -> reloading [ label = "✋reload tap\nprojectSelected\nstoreCb\nload url⇩", color =red];

	ready -> updating [ label = "✋switch to designer\n✋delete\n✋undo/redo\nsyncFile\nstoreCb\ncodeUpdate⇩" , color =red];

	ready -> rendering  [ label = "✋user\nrender⇩\nstoreCb\nmodify⇩", color=red ];

	ready -> closed  [ label = "✋user\ncleanUp⇩" ];
	closed -> updating [ label = "✋switch to designer\nsyncFile\nstoreCb\ncodeUpdate⇩", color =red ];

	updating -> ready [  label = "dfUpdated\nexecCb()\n⇧updated", color=green ] ;
	updating -> broken [  label = "dfReloadNeeded\n⇧err.reloadNeeded" ] ;
	updating -> off [  label = "dfRequestReload\n⇧err.RequestReload" ] ;

	off    -> reloading [ label = "✋projectSelected\nstoreCb\nload url⇩\nclear fsmStash", color =red ];
	broken -> reloading [ label = "✋user render\npush render\nin fsmStash" ];
	closed -> reloading [ label = "✋projectSelected\nstoreCb\nload url⇩", color =red ];

	reloading -> initializing [ label = "dfLoaded\n⇧state.loaded\ninitializeOptions⇩" ] ;

	initializing -> initialized [ label = "dfInitialized\n⇧state.initialized\ncontainerData⇩" ] ;

	initialized -> ready [ label = "dfReady\nexecCb()\nstash pop\n⇧containerData", color=green ] ;

	reloading -> broken [ label = "dfReloadNeeded\n⇧err.reload"];

	// when is called renderKind
	updating -> rendering [ label = "✋designer-on\nrender⇩" ];
	rendering -> ready [ label = "dfRendered\ndfRenderError\n⇧rendered\ncallback()", color = green ];
	rendering -> off [ label = "dfRequestReload\n⇧err.request"];

	ready -> selecting [ label = "select⇩" ];
	selecting -> ready [ label = "dfSelected\n⇧selected" ];

}
